<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0, user-scalable=no">
    <title>COVID-19 map</title>
    <!-- style.css 파일과 연동 -->
    <link rel="stylesheet" href="/stylesheets/style.css" />
    <script type="text/javascript" src="https://openapi.map.naver.com/openapi/v3/maps.js?ncpClientId=u8m72y56wq"></script>
    <!-- jquery 사용 -->
    <script
        src="https://code.jquery.com/jquery-3.5.1.min.js"
        integrity="sha256-9/aliU8dGd2tb6OSsuzixeV4y/faTqgFtohetphbbj0=" 
        crossorigin="anonymous">
    </script>
    <!-- 카카오 api 키 발급 - 키워드로 목적지 검색을 위해 -->
    <script type="text/javascript" src="//dapi.kakao.com/v2/maps/sdk.js?appkey=f8fb1c7bcbb3f26114645cd47cfe1ea8&libraries=services"></script>
</head>
<body>
    <div id = "navbar">COVID map</div>
    <div id = "infoBox">
        <div id = "infoTitle">현재날짜</div>
        <script>
            var today = new Date();
            var year = today.getFullYear(); // 년도
            var month = today.getMonth() + 1;  // 월
            var date = today.getDate();  // 날짜

            document.write(year + '.'+ month + '.' + date)
        </script>
    </div>
    <div id="search">
        <input id="search_input" placeholder="목적지를 입력해주세요" />
        <button id="search_button">검색</button>
    </div>
    <div id="current">현재 위치</div>
    <div id="map" style="width:100%;height:100vh;"></div>

    <script type="text/javascript" src="/data/data.js"></script> 

    <script>
        var mapOptions = {
            center: new naver.maps.LatLng(37.3595704, 127.105399),
            zoom: 10   
        };

        var map = new naver.maps.Map('map', mapOptions);

        // marker = new naver.maps.Marker({
        //     map: map,
        //     position : new naver.maps.LatLng(37.3595704, 127.105399),
        //     icon : {
        //         content : "<div class='marker'></div>"
        //     }
        // })

        var markerList = [];
        var infowindowList = [];

        for (var i in data) {
            var target = data[i];
            var latlng = new naver.maps.LatLng(target.lat, target.lng);
            marker = new naver.maps.Marker({
                map: map,
                position: latlng,
                icon: {
                    content: "<div class='marker'></div>",
                    anchor: new naver.maps.Point(12,12)
                },
            });

            var content = `<div class='infowindow_wrap'>
                    <div class='infowindow_title'>${target.title}</div>
                    <div class='infowindow_content'>${target.content}</div>
                    <div class='infowindow_date'>${target.date}</div>
                </div>`

            var infowindow = new naver.maps.InfoWindow({
                content : content,
                backgroundColor : "#00ff0000",
                borderColor : "#00ff000",
                anchorSize : new naver.maps.Size(0,0)
            })


            markerList.push(marker);
            infowindowList.push(infowindow);
        }

        for(var i = 0, ii = markerList.length; i < ii; i++){
            //map을 클릭했을 때 함수 호출
            naver.maps.Event.addListener(map,"click", ClickMap(i));
            //마커를 클릭했을 때 함수 호출
            naver.maps.Event.addListener(markerList[i], "click", getClickHandler(i));
        }

        function ClickMap(i){
            return function(){
                var infowindow = infowindowList[i];
                infowindow.close();
            }
        }

        function getClickHandler(i){
            return function(){
                var marker = markerList[i];
                var infowindow = infowindowList[i];
                if(infowindow.getMap()){
                    infowindow.close();
                }else {
                    infowindow.open(map, marker)
                }
            }
        }

        let currentUse = true;

        //현재위치 받아와서 지도위에 표시
        $('#current').click(()=>{
            if('geolocation' in navigator){
                navigator.geolocation.getCurrentPosition(function(position){
                    const lat = position.coords.latitude;
                    const lng = position.coords.longitude;
                    const latlng = new naver.maps.LatLng(lat,lng);
                    //최초 1회만 마커가 생성되게 함.
                    if(currentUse){
                        marker = new naver.maps.Marker({
                        map: map,
                        position: latlng,
                        icon: {
                            content: '<img class="pulse" "draggable"="false" unselectable="on" src="https://myfirstmap.s3.ap-northeast-2.amazonaws.com/circle.png">',
                            anchor: new naver.maps.Point(11,11),
                        },
                    });
                    currentUse = false;
                    }
                    //zoom 땡기기
                    map.setZoom(14, false);
                    map.panTo(latlng);
                });
            }else {
                alert("위치정보 사용 불가능");
            }
        });

        // ps : 목적지 검색에 필요한 함수 
        let ps = new kakao.maps.services.Places();
        let search_arr = [];

        $("#search_input").on("keydown", function(e){
            if(e.keyCode == 13){ //enter를 눌렀을 때
                //카카오 검색 api를 요청 하면된다.
                let content = $(this).val(); // 검색어가 content변수에 담긴다
                ps.keywordSearch(content, placeSearchCB) // content로 api를 요청하고, 결과물이 placeSearchCB함수를 통해 처리됨
            }
        })

        $("#search_button").on("click", function(e){
            let content = $("#search_input").val();
            ps.keywordSearch(content, placeSearchCB)
        })

        // data:목적지를 바탕으로 검색한 결과
        // status: 카카오 서버의 상태
        // pagination: 검색결과가 얼마나 있는지
        function placeSearchCB(data, status, pagination){
            if(status == kakao.maps.services.Status.OK){
                let target = data[0];
                //console.log(target) //콘솔로 찍어보면 검색결과가 객체형태로 옴(객체들의 배열)
                const lat = target.y;
                const lng = target.x;
                const latlng = new naver.maps.LatLng(lat, lng);
                //마커표시
                marker = new naver.maps.Marker({
                    position: latlng,
                    map: map
                })
                if(search_arr.length == 0){
                    search_arr.push(marker)
                }
                else{
                    search_arr.push(marker)
                    let pre_marker = search_arr.splice(0,1);
                    pre_marker[0].setMap(null); //이전에 검색한 마커 지우기
                }
                map.setZoom(14, false);
                map.panTo(latlng);
            }
            else{
                alert("검색결과가 없습니다.")
            }
        }
    </script>
</body>
</html>